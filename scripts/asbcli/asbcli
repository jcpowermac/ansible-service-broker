#!/usr/bin/env python

import argparse
import uuid
import requests
import getpass
import os
import sys
import json

from subprocess import Popen, PIPE
from distutils import spawn

RECORDS_FILE = '/tmp/asbcli.dat.json'
BROKER_IMAGE = 'ansibleplaybookbundle/ansible-service-broker-apb'

BROKER_HEADERS = {
    'X-Broker-API-Version': '2.9'
}

AVAILABLE_COMMANDS = {
    'connect': 'Connect to a broker to interact',
    'up': 'Bring up a broker in a target cluster'
}


def req(url, **kwargs):
    # merge in broker headers if provided
    headers = BROKER_HEADERS
    if 'headers' in kwargs:
        headers = kwargs['headers']
        headers.update(BROKER_HEADERS)
    kwargs['headers'] = headers

    verb = kwargs.pop('verb', 'get')

    return getattr(requests, verb)(url, **kwargs)


def consumer_binding_key(svc_record):
    # Need to perform a conversion from whatever binding key
    # was provided to the k8s delivered equiv env var
    # i.e external-mlab -> EXTERNAL_MLAB
    key_in = svc_record['answers']['binding_key']
    return key_in.upper().replace('-', '_')


def create_binding_record(creds, svc_record):
    ############################################################
    # TODO: HACK
    # Need to make sure parameter names line up with keys passed
    # back from credentials so we can automatically fill in params
    # on a provision with bind call. Again, this is only temporary
    # until a real service catalog can be leveraged to automatically
    # inject keys into the environment.
    #
    # Still will need some kind of key or label to tell the
    # binding consumer where to look for its binding data in the
    # environment.
    ############################################################
    return {
        'project_name': svc_record['answers']['project_name'],
        'binding_key': consumer_binding_key(svc_record),
        'mongo_db': creds['db'],
        'mongo_user': creds['user'],
        'mongo_pass': creds['pass'],
    }


class App(object):
    def __init__(self, broker_address):
        self.broker_address = broker_address
        self.catalog = None
        self.opts = {
                't': ('bootstrap', self._cmd_bootstrap),
                'l': ('list services', self._cmd_list_services),
                'p': ('provision service', self._cmd_provision),
                'b': ('bind service', self._cmd_bind),
                'd': ('drop records', self._cmd_drop_records),
                '?': ('show menu', self._cmd_show_menu)
        }
        self._records = None

    def run(self):
        opt = ''

        self._load_records()

        self._cmd_show_menu()
        while opt != 'q':
            opt = raw_input("# ")

            if opt == 'q':
                break

            if opt not in self.opts:
                print 'ERROR: Unknown option!'
                continue

            should_quit = self.opts[opt][1]()
            if should_quit:
                break

        print 'Quitting ansibleapp client!'

    def _cmd_show_menu(self):
        print '============================================================'
        print "Select an option ('q' to quit):"
        print '============================================================'
        for k in self.opts:
            print '  %s | %s' % (k, self.opts[k][0])

    def _cmd_bootstrap(self):
        print 'Bootstrapping broker...'
        self._req_bootstrap()
        return False

    def _cmd_list_services(self):
        print 'Available services:'

        if not self.catalog:
            print ('NOTE: No services loaded in client,'
                   ' requesting catalog from broker...')
            self._req_catalog()

        self._print_service_options()
        return False

    def _cmd_provision(self):
        if not self.catalog:
            print ('No services loaded in client,'
                   ' requesting catalog from broker...')
            self._req_catalog()

        opt = None
        valid_choices = [service['num'] for service in self.catalog]
        while True:
            print 'Select a service to provision:'
            self._print_service_options()
            opt = int(raw_input('# '))  # TODO: Do this better.
            if int(opt) not in valid_choices:
                print 'ERROR: Invalid choice!'
            else:
                break
        catalog_entry = self.catalog[opt - 1]
        service = catalog_entry['service']

        binding_recs = self._records['binding']
        use_binding = self._prompt_binding()
        sel_binding = None

        if use_binding:
            # TODO: HACK, bad magic value. Need to get this key dynamically
            binding_opts = [(idx+1, key, binding_recs[key]['mongo_user'])
                            for idx, key in
                            enumerate(binding_recs)]

            opt = None
            valid_choices = [binding[0] for binding in binding_opts]
            while True:
                print 'Select a binding to use:'
                self._print_binding_menu(binding_opts)
                opt = int(raw_input('# '))  # TODO: Do this better.

                if int(opt) not in valid_choices:
                    print 'ERROR: Invalid choice!'
                else:
                    break

            binding_opt = binding_opts[opt - 1]
            sel_binding = binding_recs[binding_opt[1]]

        print '[ %s ] selected for provisioning...' % catalog_entry['name']
        answers, using_some_bind = self._get_prov_answers(service, sel_binding)

        if using_some_bind:
            print 'Using binding credentials.'
        print 'Service configured! Requesting broker to provision...'
        res, instance_id = self._req_provision(service['id'], answers)
        print 'Provision returned status code: %s' % res.status_code
        print 'service_id: %s' % service['id']
        print 'instance_id: %s' % instance_id

        service_record = {
            'service_id': service['id'],
            'answers': answers,
            'name': catalog_entry['name'],
        }
        self._set_service_record(instance_id, service_record)
        self._save_records()

        if res.status_code == 201:
            print 'Broker reported provisioning success!'
            return False
        if res.status_code == 202:
            if 'operation' in res.json():
                print "Check status of %s" % res.json()["operation"]
            return False
        else:
            print 'ERROR: Got a non-2xx code back from the broker... %d' % res.status_code
            return True

    def _prompt_binding(self):
        binding_recs = self._records['binding']
        if len(binding_recs) != 0:
            use_binding = None
            while True:
                use_binding = raw_input("Do you want to use an existing binding? [y/n] # ")
                if use_binding == 'y' or use_binding == 'n':
                    break
                else:
                    print 'ERROR: Select y or n.'
            return use_binding == 'y'

    def _cmd_bind(self):
        svc_instances = self._records['service']
        bindable_opts = [(idx+1, key, svc_instances[key]['name'])
                         for idx, key in
                         enumerate(self._records['service'].keys())]

        if len(bindable_opts) == 0:
            print ('No services have been provisioned;'
                   ' nothing available for bind!')
            return False

        ############################################################
        # -> HACK: create hardcoded list of params, prompt for answers
        #      Longterm, need to get params from services
        # -> _req_bind(svc_instance_id, answers)
        # -> res, binding_instance_id
        # -> set_binding_record(
        #    * binding_id -> {service_instance_id, db, user, pass}
        ############################################################
        opt = None
        valid_choices = [svc[0] for svc in bindable_opts]
        while True:
            print 'Select a service instance to bind to:'
            self._print_bindable_services(bindable_opts)
            opt = int(raw_input('# '))  # TODO: Do this better.

            if int(opt) not in valid_choices:
                print 'ERROR: Invalid choice!'
            else:
                break

        svc_to_bind = bindable_opts[opt - 1]
        svc_instance_id = svc_to_bind[1]
        svc_record = self._records['service'][svc_instance_id]

        # answers = self._get_bind_answers(service)
        bind_answers = self._get_bind_answers()

        res, binding_instance_id = self._req_bind(
                svc_record['service_id'], svc_instance_id, bind_answers)

        if res.status_code == 201:
            print 'Broker reported binding success!'
        else:
            print 'ERROR: Got a non-2xx code back from the broker for bind req...'
            return True

        creds = res.json()['credentials']

        binding_record = create_binding_record(creds, svc_record)
        self._set_binding_record(binding_instance_id, binding_record)
        self._save_records()

    def _cmd_drop_records(self):
        self._records = {
            'service': {},
            'binding': {},
        }
        self._drop_records()

    def _get_prov_answers(self, service, sel_binding):
        if not sel_binding:
            print 'Configure your service:'

        using_some_bind = False
        answers = {}
        for param in service['metadata']['parameters']:
            # Accept binding value for param if its present, otherwise prompt
            param_name = param['name']
            binding_match = sel_binding.get(param_name) \
                if sel_binding else None
            if binding_match:
                answers[param_name] = binding_match
                using_some_bind = True
                continue  # skip prompt if we're accepting val from binding

            answer = None
            while True:
                supports_default = param.get('default') is not None

                if param['required'] is False and not supports_default:
                    query = '%s (generated if blank) # ' % param_name
                elif supports_default:
                    query = '%s (default: %s) # ' % \
                        (param_name, param['default'])
                else:
                    query = '%s # ' % param_name
                answer = raw_input(query)

                # TODO: This is fugly. Fix it.
                should_pass = answer == '' and param['required'] is False \
                    and not supports_default

                if should_pass:
                    pass
                elif answer == '' and not supports_default:
                    print 'ERROR: Must provide an answer for this parameter'
                    continue
                elif answer == '' and supports_default:
                    answer = param['default']

                answers[param_name] = answer
                break

        _answers = answers.copy()
        for k, v in answers.iteritems():
            if v == '':
                del _answers[k]

        return (_answers, using_some_bind)

    def _get_bind_answers(self):
        ############################################################
        # TODO: HACK:
        # This entire method needs to be reworked. It's hardcoded
        # currently for external-mlab since the OpenServiceBroker
        # spec is still a bit in flux around how method attached
        # parameters are going to work.
        #
        # To support this dynamically, it also requires a potentially breaking
        # and destabalizing change to the ansibleapp spec.
        # This will get reviewed, ripped out and done correctly asap.
        #
        # So...here be dragons.
        ############################################################
        print 'Configure your binding:'

        HARDCODED_PARAMS = [{
            'required': True,
            'name': 'user',
        }]

        answers = {}
        for param in HARDCODED_PARAMS:
            answer = None
            while True:
                supports_default = param.get('default') is not None

                if param['required'] is False and not supports_default:
                    query = '%s (generated if blank) # ' % param['name']
                elif supports_default:
                    query = '%s (default: %s) # ' % \
                        (param['name'], param['default'])
                else:
                    query = '%s # ' % param['name']
                answer = raw_input(query)

                # TODO: This is fugly. Fix it.
                should_pass = answer == '' and param['required'] is False \
                    and not supports_default

                if should_pass:
                    pass
                elif answer == '' and not supports_default:
                    print 'ERROR: Must provide an answer for this parameter'
                    continue
                elif answer == '' and supports_default:
                    answer = param['default']

                answers[param['name']] = answer
                break

        _answers = answers.copy()
        for k, v in answers.iteritems():
            if v == '':
                del _answers[k]

        return _answers

    def _req_bootstrap(self):
        res = req(self._url('/bootstrap'), verb='post')
        spec_count = res.json()['SpecCount']
        print 'Bootstrapped %d specs into broker from dockerhub!' % spec_count

    def _req_catalog(self):
        res = req(self._url('/catalog'))
        self.catalog = [{
            'num': idx + 1,
            'name': service['name'],
            'id': service['id'],
            'service': service,
        } for idx, service in enumerate(res.json()['services'])]
        print 'Loaded %d services from broker catalog:' % len(self.catalog)

    def _set_service_record(self, key, value):
        self._records['service'][key] = value

    def _get_service_record(self, key):
        return self._records['service'][key]

    def _set_binding_record(self, key, value):
        self._records['binding'][key] = value

    def _get_binding_record(self, key):
        return self._records['binding'][key]

    def _save_records(self):
        print "Saving records to file: %s" % RECORDS_FILE
        with open(RECORDS_FILE, 'w') as dat_file:
            json.dump(self._records, dat_file)

    def _load_records(self):
        if not os.path.exists(RECORDS_FILE):
            print "NOTE: Records file does not exist, cannot load"
            if not self._records:
                self._records = {
                    'service': {},
                    'binding': {},
                }
            return

        print "Loading records file: %s" % RECORDS_FILE
        with open(RECORDS_FILE, 'r') as dat_file:
            self._records = json.load(dat_file)

    def _drop_records(self):
        print "Dropping records file: %s" % RECORDS_FILE
        try:
            os.remove(RECORDS_FILE)
        except OSError:
            pass

############################################################
# 6 instanceUUID="688eea24-9cf9-43e3-9942-d1863b2a16af"
# 7 planUUID="4c10ff42-be89-420a-9bab-27a9bef9aed8"
# 9 serviceUUID="4240b39c-116b-40b9-9b77-2d30e229f0dc"
# 10
# 11 req="{
# 12   \"plan_id\": \"$planUUID\",
# 13   \"service_id\": \"$serviceUUID\",
# 14   \"parameters\": {
# 15     \"MYSQL_USER\": \"username\"
# 16   }
# 17 }"
# 18
# 19 curl \
# 20   -X PUT \
# 21   -H 'X-Broker-API-Version: 2.9' \
# 22   -H 'Content-Type: application/json' \
# 23   -d "$req" \
# 24   -v \
# 25   http://cap.example.com:1338/v2/service_instances/$instanceUUID
############################################################
    def _req_provision(self, service_id, answers):
        # Generate a uuid instance ID acting as a Service Catalog would do
        instance_id = str(uuid.uuid4())
        plan_id = str(uuid.uuid4())  # not clear how this is used yet, req tho
        path = '/service_instances/%s?accepts_incomplete=true' % instance_id
        req_body = {
            'plan_id': plan_id,
            'service_id': service_id,
            'parameters': answers
        }
        return (req(self._url(path), verb='put', json=req_body), instance_id)

###############################################################################
# !/bin/bash -e

# . shared.sh

# mlab with params
# instanceUUID="8c9adf85-9221-4776-aa18-aae7b7acc436"
# req="{
#   \"plan_id\": \"$planUUID\",
#   \"service_id\": \"$serviceUUID\",
#   TODO: what are the next two keys?
#   \"app_guid\":\"\",
#   \"bind_resource\":{},
#   \"parameters\": {
#     \"user\": \"acct_one\"
#   }
# }"

# curl \
#   -X PUT \
#   -H 'X-Broker-API-Version: 2.9' \
#   -H 'Content-Type: application/json' \
#   -d "$req" \
#   -v \
#   http://cap.example.com:1338/v2/service_instances/$instanceUUID/service_bindings/$bindingUUID
###############################################################################

    def _req_bind(self, svc_id, svc_instance_id, bind_answers):
        binding_instance_id = str(uuid.uuid4())
        plan_id = str(uuid.uuid4())
        path = '/service_instances/%s/service_bindings/%s' % \
               (svc_instance_id, binding_instance_id)

        req_body = {
            'plan_id': plan_id,
            'service_id': svc_id,
            'app_guid': '',
            'bind_resource': {},
            'parameters': bind_answers,
        }

        return (req(self._url(path), verb='put', json=req_body),
                binding_instance_id)

    def _print_service_options(self):
        if self.catalog:
            for service in self.catalog:
                print '  %d | %s' % (service['num'], service['name'])
        else:
            print 'No available ansibleapps found!'

    def _print_bindable_services(self, opts):
        for svc in opts:
            print '  %d | %s | %s' % (svc[0], svc[2], svc[1])

    def _print_binding_menu(self, opts):
        for bb in opts:
            print '  %d | %s | %s' % (bb[0], bb[2], bb[1])

    def _url(self, path):
        return 'http://%s/v2%s' % (self.broker_address, path)


def subcmd_connect_parser(parser, subcmd):
    subcmd.add_argument(
        'broker_address', action='store',
        help=u'Service Broker address <host>:<port>, ex: localhost:1338'
    )


def subcmd_up_parser(parser, subcmd):
    subcmd.add_argument(
        'cluster_address', action='store',
        help=u'Address of the cluster where the broker will be deployed'
    )
    subcmd.add_argument(
        '--cluster-user', action='store', dest='openshift_user',
        help=u'Cluster user that will be used to deploy the broker',
        required=True
    )
    subcmd.add_argument(
        '--cluster-pass', action='store', dest='openshift_pass',
        help=u'Cluster password that will be used to deploy the broker'
    )
    subcmd.add_argument(
        '--dockerhub-user', action='store', dest='dockerhub_user',
        help=u'Dockerhub user. Used to communicate with dockerhub registry.',
        required=True
    )
    subcmd.add_argument(
        '--dockerhub-pass', action='store', dest='dockerhub_pass',
        help=u'Dockerhub pass. Used to communicate with dockerhub registry.',
    )
    subcmd.add_argument(
        '--org', action='store', dest='org',
        help=u'org for ansibleapps',
    )


def cmdrun_connect(**kwargs):
    App(kwargs['broker_address']).run()


def cmdrun_up(**kwargs):
    cluster = kwargs['cluster_address']
    openshift_user = kwargs['openshift_user']
    openshift_pass = kwargs['openshift_pass']
    dockerhub_user = kwargs['dockerhub_user']
    dockerhub_pass = kwargs['dockerhub_pass']
    org = kwargs['org']

    if not openshift_pass:
        openshift_pass = getpass.getpass('Enter cluster password: ')
    if not dockerhub_pass:
        dockerhub_pass = getpass.getpass('Enter dockerhub password: ')

    docker_bin = spawn.find_executable('docker')
    if not docker_bin:
        raise Exception('ERROR: Could not find docker executable.')

    # TODO: Right now, the broker will provision to the same cluster that it
    # is deployed to. Could make this configurable.
    brokerup_cmd = [
        docker_bin, 'run',
        '-e', 'OPENSHIFT_TARGET=%s' % cluster,
        '-e', 'OPENSHIFT_USER=%s' % openshift_user,
        '-e', 'OPENSHIFT_PASS=%s' % openshift_pass,
        BROKER_IMAGE, 'provision',
        '-e', 'dockerhub_user=%s' % dockerhub_user,
        '-e', 'dockerhub_pass=%s' % dockerhub_pass,
        '-e', 'openshift_target=%s' % cluster,
        '-e', 'openshift_user=%s' % openshift_user,
        '-e', 'openshift_pass=%s' % openshift_pass,
        '-e', 'org=%s' % org,
    ]

    brokerup_p = Popen(brokerup_cmd, stdin=PIPE, stdout=PIPE, stderr=PIPE)
    output, err = brokerup_p.communicate()

    if err:
        print "ERROR: Something went wrong trying to bring up a broker"
        raise Exception(err)

    print output


def main():
    parser = argparse.ArgumentParser(
            description=u'Utility acting as a ServiceCatalog+Client for'
            u' driving an ansible-service-broker')
    subparsers = parser.add_subparsers(title='subcommand', dest='subcommand')
    subparsers.required = True

    for subcommand in AVAILABLE_COMMANDS:
        subparser = subparsers.add_parser(
            subcommand, help=AVAILABLE_COMMANDS[subcommand]
        )
        globals()['subcmd_%s_parser' % subcommand](parser, subparser)

    args = parser.parse_args()

    try:
        globals()['cmdrun_%s' % args.subcommand](**vars(args))
    except Exception as e:
        print 'Exception occurred! %s' % e
        sys.exit(1)


if __name__ == '__main__':
    main()
